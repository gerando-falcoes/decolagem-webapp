import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey)

export async function POST(request: Request) {
  try {
    console.log('üìù API: Aprovando fam√≠lias...')

    const body = await request.json()
    const { familyIds, mentorId, mentorName } = body

    // Valida√ß√µes b√°sicas
    if (!familyIds || !Array.isArray(familyIds) || familyIds.length === 0) {
      return NextResponse.json(
        { error: 'IDs das fam√≠lias s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }

    if (!mentorId || !mentorName) {
      return NextResponse.json(
        { error: 'ID e nome do mentor s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }

    console.log(`üîç API: Aprovando ${familyIds.length} fam√≠lia(s) pelo mentor: ${mentorName}`)

    // Buscar os profiles das fam√≠lias para validar se existem e est√£o pendentes
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, name, status_aprovacao')
      .in('id', familyIds)
      .eq('role', 'familia')

    if (profilesError) {
      console.error('‚ùå API: Erro ao buscar profiles das fam√≠lias:', profilesError)
      return NextResponse.json({ error: profilesError.message }, { status: 500 })
    }

    if (!profiles || profiles.length === 0) {
      return NextResponse.json(
        { error: 'Nenhuma fam√≠lia encontrada com os IDs fornecidos' },
        { status: 404 }
      )
    }

    console.log(`‚úÖ API: ${profiles.length} fam√≠lia(s) encontrada(s) para aprova√ß√£o`)

    // Verificar se todas as fam√≠lias est√£o com status 'pendente'
    const familiasNaoPendentes = profiles.filter(p => p.status_aprovacao !== 'pendente')
    if (familiasNaoPendentes.length > 0) {
      console.log(`‚ö†Ô∏è API: ${familiasNaoPendentes.length} fam√≠lia(s) n√£o est√£o pendentes:`, 
        familiasNaoPendentes.map(f => `${f.name} (${f.status_aprovacao})`))
    }

    // Aprovar as fam√≠lias - atualizar o status, aprovado_por e data_aprovacao
    const now = new Date().toISOString()
    
    const { data: updatedProfiles, error: updateError } = await supabase
      .from('profiles')
      .update({
        status_aprovacao: 'aprovado',
        aprovado_por: mentorId,
        data_aprovacao: now,
        updated_at: now
      })
      .in('id', familyIds)
      .eq('role', 'familia')
      .select('id, name, status_aprovacao, data_aprovacao')

    if (updateError) {
      console.error('‚ùå API: Erro ao atualizar profiles das fam√≠lias:', updateError)
      return NextResponse.json({ error: updateError.message }, { status: 500 })
    }

    if (!updatedProfiles || updatedProfiles.length === 0) {
      return NextResponse.json(
        { error: 'Nenhuma fam√≠lia foi atualizada' },
        { status: 400 }
      )
    }

    console.log(`‚úÖ API: ${updatedProfiles.length} fam√≠lia(s) aprovada(s) com sucesso`)
    console.log('üìä API: Fam√≠lias aprovadas:', updatedProfiles.map(f => f.name))

    return NextResponse.json({
      success: true,
      approvedFamilies: updatedProfiles,
      message: `${updatedProfiles.length} fam√≠lia(s) aprovada(s) com sucesso por ${mentorName}!`,
      approvedBy: mentorName,
      approvalDate: now
    })

  } catch (error) {
    console.error('‚ùå API: Erro geral ao aprovar fam√≠lias:', error)
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })
  }
}

export async function GET() {
  try {
    console.log('üîç API: Buscando fam√≠lias pendentes de aprova√ß√£o...')

    // Buscar fam√≠lias com status 'pendente' na tabela profiles
    const { data: pendingFamilies, error: pendingError } = await supabase
      .from('profiles')
      .select(`
        id,
        name,
        email,
        phone,
        cpf,
        status_aprovacao,
        created_at,
        updated_at
      `)
      .eq('role', 'familia')
      .eq('status_aprovacao', 'pendente')
      .order('created_at', { ascending: false })

    if (pendingError) {
      console.error('‚ùå API: Erro ao buscar fam√≠lias pendentes:', pendingError)
      return NextResponse.json({ error: pendingError.message }, { status: 500 })
    }

    console.log(`‚úÖ API: ${pendingFamilies?.length || 0} fam√≠lia(s) pendente(s) encontrada(s)`)

    return NextResponse.json({
      success: true,
      pendingFamilies: pendingFamilies || [],
      count: pendingFamilies?.length || 0
    })

  } catch (error) {
    console.error('‚ùå API: Erro geral ao buscar fam√≠lias pendentes:', error)
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })
  }
}
