import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey)

export async function POST(request: Request) {
  try {
    console.log('üóëÔ∏è API: Iniciando exclus√£o de fam√≠lia...')

    const body = await request.json()
    const { familyId, cpf, confirmText } = body

    // Valida√ß√µes b√°sicas
    if (!familyId || !cpf) {
      return NextResponse.json(
        { error: 'ID da fam√≠lia e CPF s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }

    // Verificar se o texto de confirma√ß√£o est√° correto
    if (confirmText !== 'DELETAR') {
      return NextResponse.json(
        { error: 'Texto de confirma√ß√£o incorreto. Digite "DELETAR" para confirmar.' },
        { status: 400 }
      )
    }

    console.log(`üîç API: Verificando fam√≠lia para exclus√£o - ID: ${familyId}, CPF: ${cpf}`)

    // 1. Verificar se a fam√≠lia existe na tabela profiles
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('id, name, cpf, role')
      .eq('id', familyId)
      .eq('cpf', cpf)
      .eq('role', 'familia')
      .single()

    if (profileError || !profile) {
      console.error('‚ùå API: Fam√≠lia n√£o encontrada:', profileError?.message)
      return NextResponse.json(
        { error: 'Fam√≠lia n√£o encontrada ou dados inv√°lidos' },
        { status: 404 }
      )
    }

    console.log(`‚úÖ API: Fam√≠lia encontrada: ${profile.name}`)

    // 2. Buscar fam√≠lia na tabela families para obter o family_id
    const { data: family, error: familyError } = await supabase
      .from('families')
      .select('id, name')
      .eq('cpf', cpf)
      .single()

    if (familyError || !family) {
      console.error('‚ùå API: Fam√≠lia n√£o encontrada na tabela families:', familyError?.message)
      return NextResponse.json(
        { error: 'Fam√≠lia n√£o encontrada na tabela families' },
        { status: 404 }
      )
    }

    console.log(`‚úÖ API: Fam√≠lia encontrada na tabela families: ${family.name}`)

    // 3. Deletar em cascata - come√ßar pelas tabelas dependentes
    console.log('üóëÔ∏è API: Iniciando exclus√£o em cascata...')

    // 3.1. Deletar family_members
    const { error: membersError } = await supabase
      .from('family_members')
      .delete()
      .eq('family_id', family.id)

    if (membersError) {
      console.error('‚ùå API: Erro ao deletar membros da fam√≠lia:', membersError.message)
    } else {
      console.log('‚úÖ API: Membros da fam√≠lia deletados')
    }

    // 3.2. Deletar assessments (dignometro_assessments)
    const { error: assessmentsError } = await supabase
      .from('dignometro_assessments')
      .delete()
      .eq('family_id', family.id)

    if (assessmentsError) {
      console.error('‚ùå API: Erro ao deletar avalia√ß√µes:', assessmentsError.message)
    } else {
      console.log('‚úÖ API: Avalia√ß√µes deletadas')
    }

    // 3.3. Deletar goals
    const { error: goalsError } = await supabase
      .from('goals')
      .delete()
      .eq('family_id', family.id)

    if (goalsError) {
      console.error('‚ùå API: Erro ao deletar metas:', goalsError.message)
    } else {
      console.log('‚úÖ API: Metas deletadas')
    }

    // 3.4. Deletar family_goals
    const { error: familyGoalsError } = await supabase
      .from('family_goals')
      .delete()
      .eq('family_id', family.id)

    if (familyGoalsError) {
      console.error('‚ùå API: Erro ao deletar metas da fam√≠lia:', familyGoalsError.message)
    } else {
      console.log('‚úÖ API: Metas da fam√≠lia deletadas')
    }

    // 3.5. Deletar followups
    const { error: followupsError } = await supabase
      .from('followups')
      .delete()
      .eq('family_id', family.id)

    if (followupsError) {
      console.error('‚ùå API: Erro ao deletar acompanhamentos:', followupsError.message)
    } else {
      console.log('‚úÖ API: Acompanhamentos deletados')
    }

    // 3.6. Deletar alerts
    const { error: alertsError } = await supabase
      .from('alerts')
      .delete()
      .eq('family_id', family.id)

    if (alertsError) {
      console.error('‚ùå API: Erro ao deletar alertas:', alertsError.message)
    } else {
      console.log('‚úÖ API: Alertas deletados')
    }

    // 3.7. Deletar attachments
    const { error: attachmentsError } = await supabase
      .from('attachments')
      .delete()
      .eq('family_id', family.id)

    if (attachmentsError) {
      console.error('‚ùå API: Erro ao deletar anexos:', attachmentsError.message)
    } else {
      console.log('‚úÖ API: Anexos deletados')
    }

    // 4. Deletar a fam√≠lia da tabela families
    const { error: familyDeleteError } = await supabase
      .from('families')
      .delete()
      .eq('id', family.id)

    if (familyDeleteError) {
      console.error('‚ùå API: Erro ao deletar fam√≠lia:', familyDeleteError.message)
      return NextResponse.json({ error: familyDeleteError.message }, { status: 500 })
    }

    console.log('‚úÖ API: Fam√≠lia deletada da tabela families')

    // 5. Por √∫ltimo, deletar o perfil da tabela profiles
    const { error: profileDeleteError } = await supabase
      .from('profiles')
      .delete()
      .eq('id', familyId)

    if (profileDeleteError) {
      console.error('‚ùå API: Erro ao deletar perfil:', profileDeleteError.message)
      return NextResponse.json({ error: profileDeleteError.message }, { status: 500 })
    }

    console.log('‚úÖ API: Perfil deletado da tabela profiles')

    console.log(`üéâ API: Fam√≠lia "${profile.name}" deletada com sucesso!`)

    return NextResponse.json({
      success: true,
      message: `Fam√≠lia "${profile.name}" foi deletada permanentemente do sistema.`,
      deletedFamily: {
        name: profile.name,
        cpf: profile.cpf,
        familyId: family.id
      }
    })

  } catch (error) {
    console.error('‚ùå API: Erro geral ao deletar fam√≠lia:', error)
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })
  }
}

export async function GET() {
  try {
    console.log('üîç API: Buscando fam√≠lias para exclus√£o...')

    // Buscar fam√≠lias da tabela profiles com role 'familia'
    const { data: families, error: familiesError } = await supabase
      .from('profiles')
      .select(`
        id,
        name,
        email,
        phone,
        cpf,
        status_aprovacao,
        created_at,
        updated_at
      `)
      .eq('role', 'familia')
      .order('name')

    if (familiesError) {
      console.error('‚ùå API: Erro ao buscar fam√≠lias:', familiesError)
      return NextResponse.json({ error: familiesError.message }, { status: 500 })
    }

    console.log(`‚úÖ API: ${families?.length || 0} fam√≠lia(s) encontrada(s) para exclus√£o`)

    return NextResponse.json({
      success: true,
      families: families || [],
      count: families?.length || 0
    })

  } catch (error) {
    console.error('‚ùå API: Erro geral ao buscar fam√≠lias para exclus√£o:', error)
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })
  }
}
