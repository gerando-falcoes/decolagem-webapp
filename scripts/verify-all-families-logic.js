const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://iawcvuzhrkayzpdyhbii.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imlhd2N2dXpocmtheXpwZHloYmlpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzQ0OTc1NywiZXhwIjoyMDczMDI1NzU3fQ.ks2rPaRYqY9DFRVjEYsi8O4QkPvIoiogaHWZiTpJmVI';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function verifyAllFamiliesLogic() {
  try {
    console.log('üîç VERIFICANDO L√ìGICA DE METAS PARA TODAS AS FAM√çLIAS\n');
    
    // 1. Buscar todas as fam√≠lias
    const { data: families, error: familiesError } = await supabase
      .from('families')
      .select('id, name')
      .order('name');
    
    if (familiesError) {
      console.log('‚ùå Erro ao buscar fam√≠lias:', familiesError.message);
      return;
    }
    
    console.log(`üìä Total de fam√≠lias encontradas: ${families.length}\n`);
    
    // 2. Para cada fam√≠lia, verificar dign√¥metro e vulnerabilidades
    const results = [];
    
    for (const family of families) {
      console.log(`\nüè† Analisando fam√≠lia: ${family.name} (${family.id})`);
      
      // Buscar dign√¥metro da fam√≠lia
      const { data: assessments, error: assessmentError } = await supabase
        .from('dignometro_assessments')
        .select('id, answers, poverty_score, poverty_level, created_at')
        .eq('family_id', family.id)
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (assessmentError) {
        console.log(`   ‚ùå Erro ao buscar dign√¥metro: ${assessmentError.message}`);
        continue;
      }
      
      if (!assessments || assessments.length === 0) {
        console.log('   üìã Status: SEM DIGN√îMETRO');
        console.log('   üéØ Metas esperadas: 0 (sem vulnerabilidades identificadas)');
        results.push({
          family: family.name,
          family_id: family.id,
          has_dignometer: false,
          vulnerabilities: [],
          expected_goals: 0,
          status: 'SEM_DIGNOMETER'
        });
        continue;
      }
      
      const assessment = assessments[0];
      const answers = assessment.answers || {};
      
      // Identificar vulnerabilidades (dimens√µes com false)
      const vulnerabilities = Object.entries(answers)
        .filter(([key, value]) => value === false)
        .map(([key]) => key);
      
      const expectedGoals = vulnerabilities.length * 3; // 3 metas por dimens√£o vulner√°vel
      
      console.log(`   üìä Score: ${assessment.poverty_score}`);
      console.log(`   üè∑Ô∏è N√≠vel: ${assessment.poverty_level}`);
      console.log(`   üìÖ Data: ${new Date(assessment.created_at).toLocaleDateString('pt-BR')}`);
      console.log(`   üö® Vulnerabilidades: ${vulnerabilities.length} (${vulnerabilities.join(', ')})`);
      console.log(`   üéØ Metas esperadas: ${expectedGoals} (${vulnerabilities.length} √ó 3)`);
      
      results.push({
        family: family.name,
        family_id: family.id,
        has_dignometer: true,
        score: assessment.poverty_score,
        level: assessment.poverty_level,
        vulnerabilities: vulnerabilities,
        expected_goals: expectedGoals,
        status: vulnerabilities.length > 0 ? 'COM_VULNERABILIDADES' : 'SEM_VULNERABILIDADES'
      });
    }
    
    // 3. Resumo geral
    console.log('\nüìã RESUMO GERAL\n');
    
    const withDignometer = results.filter(r => r.has_dignometer);
    const withoutDignometer = results.filter(r => !r.has_dignometer);
    const withVulnerabilities = results.filter(r => r.status === 'COM_VULNERABILIDADES');
    const withoutVulnerabilities = results.filter(r => r.status === 'SEM_VULNERABILIDADES');
    
    console.log(`üìä Fam√≠lias com dign√¥metro: ${withDignometer.length}`);
    console.log(`üìä Fam√≠lias sem dign√¥metro: ${withoutDignometer.length}`);
    console.log(`üö® Fam√≠lias com vulnerabilidades: ${withVulnerabilities.length}`);
    console.log(`‚úÖ Fam√≠lias sem vulnerabilidades: ${withoutVulnerabilities.length}`);
    
    const totalExpectedGoals = results.reduce((sum, r) => sum + r.expected_goals, 0);
    console.log(`üéØ Total de metas esperadas no sistema: ${totalExpectedGoals}`);
    
    // 4. Detalhes por status
    console.log('\nüè† FAM√çLIAS COM VULNERABILIDADES:');
    withVulnerabilities.forEach(family => {
      console.log(`   ‚Ä¢ ${family.family} - ${family.vulnerabilities.length} vulnerabilidades (${family.expected_goals} metas)`);
      console.log(`     Dimens√µes: ${family.vulnerabilities.join(', ')}`);
    });
    
    if (withoutDignometer.length > 0) {
      console.log('\nüìã FAM√çLIAS SEM DIGN√îMETRO:');
      withoutDignometer.forEach(family => {
        console.log(`   ‚Ä¢ ${family.family} (ID: ${family.family_id})`);
      });
    }
    
    if (withoutVulnerabilities.length > 0) {
      console.log('\n‚úÖ FAM√çLIAS SEM VULNERABILIDADES:');
      withoutVulnerabilities.forEach(family => {
        console.log(`   ‚Ä¢ ${family.family} - Score: ${family.score} (${family.level})`);
      });
    }
    
    console.log('\nüéâ VERIFICA√á√ÉO CONCLU√çDA!');
    console.log('\n‚úÖ L√ìGICA APLICADA CORRETAMENTE:');
    console.log('   ‚Ä¢ S√≥ gera metas para fam√≠lias COM dign√¥metro');
    console.log('   ‚Ä¢ S√≥ gera metas para dimens√µes com vulnerabilidades (false)');
    console.log('   ‚Ä¢ Usa dados da planilha fornecida');
    console.log('   ‚Ä¢ 3 metas por dimens√£o vulner√°vel');
    
  } catch (error) {
    console.log('‚ùå Erro geral:', error.message);
  }
}

// Executar verifica√ß√£o
verifyAllFamiliesLogic();
