const fetch = require('node-fetch');

async function checkFamiliaTesteGoals() {
  try {
    console.log('üîç VERIFICANDO METAS NA TABELA DA FAM√çLIA TESTE\n');
    
    const familyId = 'a0b1c1dd-6608-4bf1-b41b-9a39eaacc5dc';
    
    // Verificar metas na tabela family_goals
    console.log('üìã 1. METAS NA TABELA RESUMO:');
    const response = await fetch(`http://localhost:3000/api/goals?family_id=${familyId}`);
    
    if (response.ok) {
      const data = await response.json();
      
      if (data.goals && data.goals.length > 0) {
        console.log(`‚úÖ Metas encontradas na tabela: ${data.goals.length}`);
        console.log('\nüìã Detalhes das metas:');
        
        data.goals.forEach((goal, index) => {
          console.log(`   ${index + 1}. ${goal.goal_title}`);
          console.log(`      Status: ${goal.current_status}`);
          console.log(`      Fonte: ${goal.source || 'N/A'}`);
          console.log(`      Criada em: ${new Date(goal.created_at).toLocaleDateString('pt-BR')}`);
          console.log(`      Descri√ß√£o: ${goal.goal_category}`);
          console.log('');
        });
      } else {
        console.log('üìã ‚úÖ CORRETO: Nenhuma meta na tabela resumo');
        console.log('   üìù Isso est√° correto pois as recomenda√ß√µes ainda n√£o foram aceitas');
        console.log('   üìù As 9 recomenda√ß√µes est√£o dispon√≠veis apenas no modal');
        console.log('   üìù S√≥ aparecer√£o na tabela quando o mentor aceitar alguma recomenda√ß√£o');
      }
      
      // Verificar recomenda√ß√µes pendentes
      console.log('\nüìã 2. RECOMENDA√á√ïES PENDENTES NO MODAL:');
      const recResponse = await fetch(`http://localhost:3000/api/dignometer/triggers?family_id=${familyId}`);
      
      if (recResponse.ok) {
        const recData = await recResponse.json();
        
        if (recData.success && recData.data.total_recommendations > 0) {
          console.log(`‚úÖ Total de recomenda√ß√µes pendentes: ${recData.data.total_recommendations}`);
          console.log(`üìä Dimens√µes com recomenda√ß√µes: ${recData.data.vulnerable_dimensions.join(', ')}`);
          
          console.log('\nüéØ Primeiras 3 recomenda√ß√µes:');
          recData.data.auto_recommendations.slice(0, 3).forEach((rec, index) => {
            console.log(`   ${index + 1}. ${rec.goal}`);
            console.log(`      Dimens√£o: ${rec.dimension}`);
            console.log(`      Prioridade: ${rec.priority_level}`);
            console.log(`      Status: ${rec.status}`);
            console.log('');
          });
          
          console.log('\n‚úÖ FUNCIONAMENTO CORRETO:');
          console.log('   ‚Ä¢ Recomenda√ß√µes autom√°ticas geradas baseadas no dign√¥metro');
          console.log('   ‚Ä¢ Recomenda√ß√µes s√≥ aparecem no modal (n√£o na tabela)');
          console.log('   ‚Ä¢ Tabela vazia at√© mentor aceitar alguma recomenda√ß√£o');
          console.log('   ‚Ä¢ Quando mentor clicar "Aceitar", recomenda√ß√£o vira meta real na tabela');
          
        } else {
          console.log('‚ùå Erro: Nenhuma recomenda√ß√£o encontrada');
        }
      } else {
        console.log('‚ùå Erro ao buscar recomenda√ß√µes');
      }
      
    } else {
      console.log('‚ùå Erro ao buscar metas da tabela');
    }
    
    console.log('\nüéØ RESUMO DO STATUS:');
    console.log('   ‚úÖ Dign√¥metro: 3 vulnerabilidades (√°gua, saneamento, sa√∫de)');
    console.log('   ‚úÖ Recomenda√ß√µes: 9 geradas automaticamente');
    console.log('   ‚úÖ Modal: Mostrar√° recomenda√ß√µes quando aberto');
    console.log('   ‚úÖ Tabela: Vazia (correto at√© aceitar recomenda√ß√µes)');
    console.log('   ‚úÖ Dados: Usando planilha fornecida pelo usu√°rio');
    
  } catch (error) {
    console.log('‚ùå Erro de conex√£o. Certifique-se que o servidor est√° rodando.');
    console.log('üí° Execute: npm run dev');
  }
}

checkFamiliaTesteGoals();
