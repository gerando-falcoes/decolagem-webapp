/**
 * TESTE: Verificar por que recomenda√ß√µes n√£o aparecem para fam√≠lia TESTE
 * 
 * PROBLEMA ENCONTRADO: Fam√≠lia TESTE n√£o possui dign√¥metro!
 * SOLU√á√ÉO: Criar sess√£o do dign√¥metro com vulnerabilidades
 */

console.log('üîç INVESTIGA√á√ÉO: Fam√≠lia TESTE sem recomenda√ß√µes')
console.log('=' * 60)

const familyId = 'a0b1c1dd-6608-4bf1-b41b-9a39eaacc5dc'

async function checkDignometerExists() {
  console.log('\n1. VERIFICANDO DIGN√îMETRO DA FAM√çLIA TESTE')
  console.log('   Family ID:', familyId)
  
  try {
    const response = await fetch(`http://localhost:3000/api/families/${familyId}/dignometer/latest`)
    
    if (response.status === 404) {
      console.log('   ‚ùå PROBLEMA ENCONTRADO!')
      console.log('   üö´ Fam√≠lia TESTE n√£o possui dign√¥metro')
      console.log('   üí° Sem dign√¥metro = Sem vulnerabilidades = Sem recomenda√ß√µes')
      return false
    }
    
    if (!response.ok) {
      throw new Error(`Erro HTTP: ${response.status}`)
    }
    
    const result = await response.json()
    console.log('   ‚úÖ Dign√¥metro encontrado!')
    console.log('   üìä Respostas:', JSON.stringify(result.dignometer.answers, null, 2))
    return true
    
  } catch (error) {
    console.log('   ‚ùå Erro ao verificar dign√¥metro:', error.message)
    return false
  }
}

async function testRecommendationsAPI() {
  console.log('\n2. TESTANDO API DE RECOMENDA√á√ïES')
  
  try {
    const response = await fetch(`http://localhost:3000/api/dignometer/triggers?family_id=${familyId}`)
    
    if (!response.ok) {
      console.log('   ‚ùå API retornou erro:', response.status)
      return null
    }
    
    const result = await response.json()
    
    console.log('   üìä Resultado da API:')
    console.log(`      ‚Ä¢ has_dignometer: ${result.data.has_dignometer}`)
    console.log(`      ‚Ä¢ vulnerable_dimensions: ${result.data.vulnerable_dimensions?.length || 0}`)
    console.log(`      ‚Ä¢ total_recommendations: ${result.data.total_recommendations}`)
    
    if (!result.data.has_dignometer) {
      console.log('   üö´ Fam√≠lia n√£o possui dign√¥metro - nenhuma recomenda√ß√£o gerada')
    }
    
    return result
    
  } catch (error) {
    console.log('   ‚ùå Erro na API:', error.message)
    return null
  }
}

async function simulateAfterDignometerCreation() {
  console.log('\n3. SIMULA√á√ÉO: AP√ìS CRIAR DIGN√îMETRO')
  console.log('   (Com as vulnerabilidades que ser√£o inseridas)')
  
  // Simular dign√¥metro com vulnerabilidades
  const mockDignometerAnswers = {
    moradia: true,
    agua: false,           // VULNER√ÅVEL
    saneamento: false,     // VULNER√ÅVEL  
    educacao: true,
    saude: false,          // VULNER√ÅVEL
    alimentacao: true,
    renda_diversificada: true,
    renda_estavel: true,
    poupanca: true,
    bens_conectividade: true
  }
  
  console.log('   üìä Respostas que ser√£o inseridas:')
  Object.keys(mockDignometerAnswers).forEach(dimension => {
    const value = mockDignometerAnswers[dimension]
    const status = value ? '‚úÖ OK' : '‚ùå VULNER√ÅVEL'
    console.log(`      ‚Ä¢ ${dimension}: ${value} ${status}`)
  })
  
  const vulnerableDimensions = Object.keys(mockDignometerAnswers).filter(
    dim => mockDignometerAnswers[dim] === false
  )
  
  console.log(`\n   üéØ ${vulnerableDimensions.length} dimens√µes vulner√°veis:`)
  vulnerableDimensions.forEach(dim => console.log(`      ‚Ä¢ ${dim}`))
  
  console.log(`\n   üéØ Recomenda√ß√µes esperadas: ${vulnerableDimensions.length * 3} (3 por dimens√£o vulner√°vel)`)
  console.log('      ‚Ä¢ 3 para √°gua')
  console.log('      ‚Ä¢ 3 para saneamento') 
  console.log('      ‚Ä¢ 3 para sa√∫de')
}

async function runDiagnostic() {
  console.log('üöÄ Iniciando diagn√≥stico...\n')
  
  // Verificar se dign√¥metro existe
  const hasDigno = await checkDignometerExists()
  
  // Testar API de recomenda√ß√µes
  const apiResult = await testRecommendationsAPI()
  
  // Simular resultado ap√≥s cria√ß√£o
  await simulateAfterDignometerCreation()
  
  console.log('\nüìã DIAGN√ìSTICO COMPLETO:')
  console.log('=' * 60)
  
  if (!hasDigno) {
    console.log('‚ùå PROBLEMA CONFIRMADO!')
    console.log('')
    console.log('üîç CAUSA RAIZ:')
    console.log('   ‚Ä¢ Fam√≠lia TESTE n√£o possui sess√£o do dign√¥metro')
    console.log('   ‚Ä¢ Sem dign√¥metro = Sem dados de vulnerabilidade')
    console.log('   ‚Ä¢ Sem vulnerabilidades = Sem recomenda√ß√µes autom√°ticas')
    
    console.log('\n‚úÖ SOLU√á√ÉO:')
    console.log('   1. Executar: scripts/sql/create_dignometer_teste_family.sql')
    console.log('   2. Abrir Supabase Dashboard ‚Üí SQL Editor')
    console.log('   3. Colar e executar o script SQL')
    console.log('   4. Recarregar a p√°gina da fam√≠lia TESTE')
    
    console.log('\nüéØ RESULTADO ESPERADO:')
    console.log('   ‚Ä¢ Dign√¥metro criado com 3 vulnerabilidades')
    console.log('   ‚Ä¢ 9 recomenda√ß√µes autom√°ticas geradas')
    console.log('   ‚Ä¢ Aba "Recomenda√ß√µes Autom√°ticas" funcionando')
    
  } else {
    console.log('‚úÖ Dign√¥metro existe, investigando outro problema...')
  }
  
  console.log('\nüéâ DIAGN√ìSTICO FINALIZADO!')
}

// Executar diagn√≥stico se for chamado diretamente
if (typeof window === 'undefined') {
  // Node.js environment
  const fetch = require('node-fetch')
  runDiagnostic().catch(console.error)
} else {
  // Browser environment
  runDiagnostic().catch(console.error)
}
